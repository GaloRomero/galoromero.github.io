name: Deploy website to GitHub Pages

env:
  WC_HUGO_VERSION: '0.136.5'

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: ${{ env.WC_HUGO_VERSION }}
        extended: true

    - uses: actions/cache@v3
      with:
        path: /tmp/hugo_cache_runner/
        key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-hugomod-

    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v3

    - name: Build with Hugo
      env:
        HUGO_ENVIRONMENT: production
      run: |
        echo "üõ† Ejecutando Hugo build..."
        hugo --minify --baseURL "${{ steps.pages.outputs.base_url }}/" || { echo "‚ùå Hugo fall√≥!"; exit 1; }
        echo "‚úÖ Hugo build completo!"

    - name: Debug - Verificar directorio public/
      run: |
        echo "üîç Verificando existencia de public/"
        if [ -d "./public" ]; then
          echo "‚úÖ public/ existe. Listando contenido:"
          ls -la ./public
        else
          echo "‚ùå ERROR: public/ no se gener√≥ correctamente!"
          exit 1
        fi

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: github-pages  # Asegurar que el nombre del artefacto sea correcto
        path: public
        if-no-files-found: error  # Falla si no encuentra archivos

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: github-pages  # Asegurar que coincida con el nombre usado en upload-artifact
        path: ./public

    - name: Debug - Verificar archivos descargados
      run: |
        echo "üîç Verificando existencia de public/ despu√©s de descargar el artefacto..."
        if [ -d "./public" ]; then
          echo "‚úÖ public/ est√° presente. Listando contenido:"
          ls -la ./public
        else
          echo "‚ùå ERROR: public/ no se descarg√≥ correctamente!"
          exit 1
        fi

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
